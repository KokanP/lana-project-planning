# .github/workflows/generate_report.yml # Renamed file suggestion

name: Generate Daily Whale Report

# Controls when the workflow will run
on:
  # Schedule to run daily at 03:00 UTC (adjust as needed)
  schedule:
    - cron: '0 3 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-and-commit: # Renamed job for clarity
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      # 1. Check out the repository code
      - name: Checkout Repository
        uses: actions/checkout@v4 # Use latest version

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5 # Use latest version
        with:
          python-version: '3.10' # Specify your Python version

      # 3. Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests matplotlib numpy # Add any other dependencies your script needs

      # 4. Run the report generation script
      #    Assumes generate_report_html.py prints HTML to stdout
      #    Make sure your API key is stored as a secret named CRYPTOID_API_KEY
      - name: Generate Report HTML
        run: python generate_report_html.py > LANA_Whale_Report.html
        env:
          API_KEY: ${{ secrets.CRYPTOID_API_KEY }} # Use the correct secret name

      # 5. Commit and Push the updated report
      - name: Commit and Push Report
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # Add the potentially updated report file
          git add LANA_Whale_Report.html
          # Check if there are changes to commit to avoid empty commits
          if git diff --staged --quiet; then
            echo "No changes detected in LANA_Whale_Report.html."
          else
            echo "Changes detected, committing and pushing..."
            git commit -m "Update LanaCoin HTML analysis report (Automated)"
            # Pull latest changes from remote and rebase local commit on top
            # This helps prevent push conflicts if the remote was updated
            git pull --rebase
            # Push the changes
            git push
            echo "Changes pushed successfully."
          fi
        env:
           # GITHUB_TOKEN might not have write permissions by default depending on repo settings.
           # If push fails due to permissions, you might need a Personal Access Token (PAT)
           # with 'repo' scope stored as a secret and used here instead.
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


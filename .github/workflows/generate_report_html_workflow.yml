# .github/workflows/archive_report.yml # Suggested filename

name: Archive Daily Whale Report

# Controls when the workflow will run
on:
  # Schedule to run daily at 08:30 UTC (adjust as needed)
  schedule:
    - cron: '30 8 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    # Grant permissions for the GITHUB_TOKEN to create releases
    # Note: 'contents: write' is needed by gh release create to create tags
    permissions:
      contents: write

    steps:
      # 1. Check out the repository code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Specify your Python version

      # 3. Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install necessary libraries for the script
          pip install requests matplotlib numpy

      # 4. Run HTML Report Generation Script
      #    Runs the python script and redirects standard output (the HTML report) to report.html
      #    Assumes the script embeds images via Base64 into the HTML.
      - name: Run HTML Report Generation Script
        id: report
        env:
          # Pass the repository secret CRYPTOID_API_KEY as API_KEY env variable
          API_KEY: ${{ secrets.CRYPTOID_API_KEY }}
        run: |
          # Use the correct script name here
          python generate_report_html.py > LANA_Whale_Report.html # Output directly to final name
          # Check if the HTML output file was created and has content
          if [ ! -s LANA_Whale_Report.html ]; then
            echo "HTML report file is empty or script failed." >&2
            exit 1 # Fail the workflow if the report is empty
          else
            echo "HTML report generated successfully."
          fi
          # Plot files are generated temporarily by the script but removed, only HTML is needed.

      # 5. Create Release and Upload HTML Report as Asset
      - name: Create Release and Upload Report Asset
        run: |
          # Generate a tag name based on the current date
          TAG_NAME="report-$(date +'%Y-%m-%d')"
          echo "Creating release with tag: $TAG_NAME"

          # Create the release and upload ONLY the HTML file.
          # The 'gh release create' command handles tag creation automatically.
          # Using '--latest=false' prevents this daily tag from being marked as the "latest" release.
          gh release create "$TAG_NAME" \
             --title "Lana Whale Report - $(date +'%Y-%m-%d')" \
             --notes "Automated daily whale report for $(date +'%Y-%m-%d'). Contains embedded images." \
             --latest=false \
             LANA_Whale_Report.html
        env:
          # GITHUB_TOKEN is automatically available and used by gh cli
          # The 'permissions: contents: write' above grants it necessary rights
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

